from flask import Flask
from flask import render_template, redirect, url_for, abort
from flask import request as req
import json
import random
from flask_sqlalchemy import SQLAlchemy
from flask_wtf import FlaskForm
from wtforms import StringField, RadioField, IntegerField, HiddenField
from wtforms.validators import DataRequired, Regexp, Required

app = Flask(__name__)
app.config.from_object('config')

db = SQLAlchemy(app)


# ==== Creating Models and relationship one-to-many for SQLAlchemy ====
class Teacher(db.Model):
    __tablename__ = 'teachers'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    about = db.Column(db.String(2048), nullable=False)
    picture = db.Column(db.String(64), nullable=False)
    rating = db.Column(db.Float)
    price = db.Column(db.Integer, nullable=False)
    goals = db.Column(db.String(255), nullable=False)
    free = db.Column(db.String(1024), nullable=False)
    booking = db.relationship('Booking', back_populates='teacher')


class Booking(db.Model):
    __tablename__ = 'booking'
    id = db.Column(db.Integer, primary_key=True)
    clientWeekday = db.Column(db.String(64), nullable=False)
    clientTime = db.Column(db.String(8), nullable=False)
    clientTeacher = db.Column(db.Integer, db.ForeignKey('teachers.id'))
    clientName = db.Column(db.String(255), nullable=False)
    clientPhone = db.Column(db.String(255), nullable=False, unique=True)
    teacher = db.relationship('Teacher', back_populates='booking')


class Request(db.Model):
    __tablename__ = 'requests'
    id = db.Column(db.Integer, primary_key=True)
    goal = db.Column(db.String(255), nullable=False)
    time = db.Column(db.String(8), nullable=False)
    name = db.Column(db.String(255), nullable=False)
    phone = db.Column(db.String(255), nullable=False, unique=True)


# ==== Creating WTForms classes for booking and request views ====
class BookingForm(FlaskForm):
    clientWeekday = HiddenField(validators=[DataRequired()])
    clientTime = HiddenField(validators=[DataRequired()])
    clientName = StringField('–í–∞—Å –∑–æ–≤—É—Ç', validators=[DataRequired(message='–ü–æ–ª–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.'), \
                                                      Regexp("^[A-z–ê-—è–Å—ë]+$", message='–ò–º—è –¥–æ–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤.')])
    clientPhone = StringField('–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 89111234567)', validators=[
        Regexp('^((\+7|7|8)+([0-9]){10})$', message='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.')])
    teacher = HiddenField(validators=[DataRequired()])


class RequestForm(FlaskForm):
    goal = RadioField(
        '–ö–∞–∫–∞—è —Ü–µ–ª—å –∑–∞–Ω—è—Ç–∏–π?',
        choices=[('travel', '–î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'), ('study', '–î–ª—è —É—á–µ–±—ã'), ('work', '–î–ª—è —Ä–∞–±–æ—Ç—ã'),
                 ('relocate', '–î–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞')], default='travel',
        validators=[DataRequired(message='–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∞—è —Ü–µ–ª—å –∑–∞–Ω—è—Ç–∏–π.')])
    time = RadioField(
        '–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –µ—Å—Ç—å?',
        choices=[('1-2', '1-2 —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é'), ('3-5', '3-5 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é'), ('5-7', '5-7 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é'),
                 ('7-10', '7-10 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é')], default='1-2',
        validators=[DataRequired(message='–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã –ø–æ—Å–≤–µ—â–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è–º.')])
    name = StringField('–í–∞—Å –∑–æ–≤—É—Ç', validators=[DataRequired(message='–ü–æ–ª–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.'), \
                                                Regexp("^[A-z–ê-—è–Å—ë]+$", message='–ò–º—è –¥–æ–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤.')])
    phone = StringField('–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 89111234567)',
                        validators=[Regexp('^((\+7|7|8)+([0-9]){10})$', message='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.')])


# ==== preparing data ====
weekdays = {
    "mon": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "tue": "–í—Ç–æ—Ä–Ω–∏–∫",
    "wed": "–°—Ä–µ–¥–∞",
    "thu": "–ß–µ—Ç–≤–µ—Ä–≥",
    "fri": "–ü—è—Ç–Ω–∏—Ü–∞",
    "sat": "–°—É–±–±–æ—Ç–∞",
    "sun": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}
goals = {"travel": ["–î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π", "‚õ±"], "study": ["–î–ª—è —É—á–µ–±—ã", "üè´"], "work": ["–î–ª—è —Ä–∞–±–æ—Ç—ã", "üè¢"],
         "relocate": ["–î–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞", "üöú"]}


# ==== views for URLs ====
@app.route('/')
def index():
    teachers_for_index = random.sample(teachers, 6)
    return render_template('index.html', teachers=teachers_for_index, goals=goals)


@app.route('/all/')
def all():
    return render_template('index.html', teachers=teachers, goals=goals)


@app.route('/goals/<goal>/')
def goal(goal):
    if goal in goals.keys():
        goals_teacher = []
        for teacher in teachers:
            if goal in json.loads(teacher.goals):
                goals_teacher.append(teacher)
        return render_template('goal.html', goals=goals, goal=goal, teachers=goals_teacher)
    return abort(404, description='–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Ü–µ–ª—å –æ–±—É—á–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')


@app.route('/profiles/<teacher_id>/', )
def profile(teacher_id):
    teacher = db.session.query(Teacher).filter(Teacher.id == teacher_id).first()
    if teacher:
        teacher.free = json.loads(teacher.free)
        teacher.goals = json.loads(teacher.goals)
        return render_template('profile.html', goals=goals, teacher=teacher, weekdays=weekdays)
    return abort(404, description='–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')


@app.route('/request/', methods=['POST', 'GET'])
def request():
    form = RequestForm()
    if form.validate_on_submit():
        request = Request()
        form.populate_obj(request)
        db.session.add(request)
        db.session.commit()
        return render_template('request_done.html', data=form, goals=goals)
    return render_template('request.html', form=form)


@app.route('/booking/<teacher_id>/<day>/<time>/', methods=['POST', 'GET'])
def booking(teacher_id, day, time):
    form = BookingForm()
    if form.validate_on_submit():
        form.teacher.data = db.session.query(Teacher).get(form.teacher.data)
        booking = Booking()
        form.populate_obj(booking)
        db.session.add(booking)
        db.session.commit()
        return render_template('booking_done.html', data=form, day=weekdays[form.clientWeekday.data])
    teacher = db.session.query(Teacher).get(teacher_id)
    if teacher and (day in weekdays.keys()) and int(time) in range(8, 23, 1):
        return render_template('booking.html', form=form, teacher=teacher, weekdays=weekdays, day=day, time=time)
    else:
        return abort(404, description='–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–∫–∞–∑–∞–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ')


@app.errorhandler(404)
def page_not_found(error):
    return render_template('404.html', error=error)

# ==== starting app ====
if __name__ == "__main__":
    teachers = db.session.query(Teacher).all()
    app.run()
